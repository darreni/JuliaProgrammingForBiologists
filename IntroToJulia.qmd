---
title: "Quick Introduction to Julia"
author: "Darren Irwin"
execute:
  echo: true
format:
  html:
    code-fold: false
jupyter: julia-1.10
---

Now that we have Julia running, we can learn how to enter expressions that Julia will evaluate. 

The simplest expressions are just a single number or string of text, e.g. try entering something like:

```{julia}
5
```

After you type `5` at the `julia>` prompt and press enter, Julia responds with `5`, the _returned value_ of your expression.

You can do a little more complex expression:

```{julia}
7 * (6 - 1)
```

### Arithmetic operators

Play around with other simple mathematical expressions. These are some of the main _arithmetic operators_, which you are likely familiar with: `+` , `-`, `*`, `/`, `^`

One that you might be less familiar with is the _remainder operator_ `%` which gives the remainder of a division, Try playing with these:

```{julia}
7 % 2
```

Another is the `√∑` operator, which produces just the integer part of a division (without the decimal part). 
You aren't likely to use `√∑` very often, but I include it here as an example of Julia's use of _unicode characters_ (more on this below). To type that character at the Julia prompt, enter `\div` followed by the `tab` key.

### Functions

We can also use some _functions_ in our expressions. A function is something that does a specific thing defined by code already loaded into memory. You can recognize a function in Julia by the fact that it will be a string of text followed immediately by parentheses, perhaps with inputs to the function inside the parentheses. Here we use the `sqrt()` function, which produces a square root of the number in the parentheses.

```{julia}
sqrt(16)
```

### Assigning values to variable names

Each of the above expressions returns a _value_ that we can give a name and store in memory, using the equal sign `=`, the _assignment operator_. We can then use variable names in subsequent expressions:

```{julia}
pop1 = 50; pop2 = 200; totalPop = pop1 + pop2
```

The semicolons above are used to separate distinct expressions that Julia should evaluate before continuing to the next. This is called a _compound expresssion_ and is a convenient to enter several commands on the same line. Another way to enter a compound expression is with a begin-end block:

```{julia}
begin
  x = 17
  y = x^2
end
```

***Try this:*** Pick a number for the radius of a circle, and assign that to a variable name and store that in Julia's memory. Then in a separate command, use that variable to calculate the area of the circle (which is given by œÄ$r^{2}$; to write the exponent of '2' though, you'll need to use '^2'). A neat thing is that Julia already knows the value of œÄ; to get it, just type `pi` or alternatively `\pi` then tab.


### Different _Types_ of numbers

When computers store numbers, they can do it in different ways, each with their advantages and disadvantages. Two main ways that Julia can store numbers are as _integers_ or as _floating-point numbers_. Integers have exact values but are quite limited in the values they can take, whereas floating-point numbers can take many more values but have a disadvantage that they are not exact. 

We can learn about the _Type_ that Julia uses to store values by using the `typeof()` function:

```{julia}
typeof(3)
```

Julia responds by saying that the value `3` is of the `Int64` type. This means that it is an integer stored in memory using 64 bits. (No worries if you don't know what this means.) Now compare to this:

```{julia}
typeof(3.0)
```

Julia responds by sayng `3.0` is of the `Float64` type. This means a 64-bit floating-point number.

Much of the time, we don't need to think about variable types, because Julia is smart and handles types through somethign called _dynamic typing_. Here's an example:

```{julia}
a = 2
b = 3.0
c = a + b
typeof(c)
```

Above, Julia figures that by entering `b = 3.0` you are indicating that you want `b` treated as a floating-point number, so when it adds the integer 2 to this, it returns a floating-point number.

Julia has all sort of other useful Types of numbers. One that I will point out here is the `Rational` number type, which you can construct with the `//` operator and do exact calculations using ratios:

```{julia}
ratio1 = 1//3
ratio2 = 5//7
product = ratio1 * ratio2
```

As your Julia skills increase, there are large benefits to being somewhat aware of types--this can help you write efficient programs and help with debugging your code. You can even define your own Types.

### Ranges

Julia has a neat data structure (i.e. a _type_) to store arithmetic series of numbers:

```{julia}
rangeOfNums = 1:100
println(rangeOfNums)
typeof(rangeOfNums)
```

Julia stores this range efficiently, until the actual numbers are needed. If we want to actually convert it to the numbers themselves, we could enter something like `collect(rangeOfNums)`

If we want only the even numbers, we enter something like `collect(0:2:30)`.

***Try this:*** Assign a vector containing the numbers counting down from 15 to -15, by 3.


### Characters and Strings

Programming in biology often involves manipulating text such as "ACGT". For this, we can use two other variable types in Julia: characters (officially `Char`) and strings (officially `String`), which are usually made up of a series of characters (imagine beads of letters on a string, ha ha).

We enter characters with single quotes, and can combine them to make strings:

```{julia}
nucleotide1 = 'T'
nucleotide2 = 'C'
dinucleotide = nucleotide1 * nucleotide2
```

Above, we create two variables of type `Char` and combined them (yes, Julia views combining characters or strings as a form of multiplication, ha ha) to produce a `String`.

***Try this:*** If Julia uses the `*` symbol for combining two characters or strings into a longer string, what do you think it might use the `^` symbol for, when applied to a character or string? Make a guess, and then play around and find out.

When you enter a `String` into Julia, you need to use double quotes (unlike a `Char` with single quotes).

```{julia}
oligo1 = "ACGCAT"
oligo2 = "CCCTG"
ligation = string(oligo1, oligo2)
```

The function `string` above concatenates different strings together.

***Try this:*** Assign a few of your favorite species to different variable names, and then combine them into a single string, with commas separating their names.

### Unicode characters

One fun thing about Julia is that you can use unicode variables in variable names, strings, function names, and some operators. The motivator for this is to make code read more like humans tend to write mathematics. For example:

```{julia}
œá¬≤ = 30.4
Œ≤ = 2œá¬≤
```

To make the unicode symbols above, you would type `\chi` tab `\^2` tab, and on the next line `\beta` tab. Notice also that the expression `2œá¬≤` is evaluated the same as `2*œá¬≤` or `2 * œá¬≤`.

Unicode also allows some fun.

***Try this:*** Assign a variable `a` the value of a `Char` given by typing `\:seedling:` tab. Assign a variable `b` the value of a `Char` given by typing `\:deciduous_tree:` tab. Then execute this line:

```julia
string(a, " grows into ", b)
```
 
We can also use unicode symbols in variable names:

```{julia}
üê¨ = 47    # write with: \:dolphin: tab
üê≥ = 5     # write with: \:whale: tab
totalMarineMammals = üê¨ + üê≥
```

Note the use of the `#` symbol to make comments to the right of code.

You can find how to write a whole bunch of unicode symbols here: <https://docs.julialang.org/en/v1/manual/unicode-input/>

### Comparisons and Booleans

In programming it is often important to check if certain conditions are `true` or `false`. These are called Booleans (of type `Bool` in Julia). 

These operators are used to compare two values (place to left and right of the operator), resulting in `true` or `false`:
`==` : equal?
`!=` : not equal?
`<` : less than?
`<=` : less than or equal?
`>` : greater than?
`>=` : greater than or equal?

***Try this:*** Try a bunch of comparisons of values using the above. These are called _Boolean expressions_.

We can use _Boolean operators_ to combine multiple comparisons. These are used as follows, where `x` and `y` are Boolean expression:
`!x`  : not x
`x && y`  : x and y
`x || y`  : x or y

For example:

```{julia}
5 <= 3 && 7 == 14/2
```

```{julia}
5 <= 3 || 7 == 14/2
```

***Try this:*** Write a short program in which you assign a numerical value to a variable, then determine whether that value is _greater than 5 or less than -3_. Your program should return `true` or `false`.

### Collections, e.g. Arrays

Variables can contain more than a single item in them. A general term for such a data structure is a _collection_. An array is a common type of collection used in Julia: It can be thought of as an n-dimensional lattice of boxes, where you can store something in each box. Here we declare some kinds of arrays:

```{julia}
arrayA = [7.3, 3, 11.2, -5, 3.2]
```

```{julia}
arrayB = [6 5 4; 3 2 1]
```

Because these variables are more complex data structures that the simple ones we've looked at so far, Julia tells you the type of the returned value, before showing you the actual values.

Note that a `Vector` is another name (an _alias_) for a 1-dimensional array, and a `Matrix` is another name for a 2-dimensional array.

We can ask Julia to return the values in parts of an array by _indexing_ into the array. For example:

```{julia}
arrayA[3]
```

```{julia}
arrayA[end]
```

```{julia}
arrayB[2, 2:3]
```

We're going to eventually learn a lot more about arrays, as they are super useful in data science, bioinformatics, and simulations.

### Broadcasting

We often want to apply an operation or function to each element of an array. In Julia this is called "broadcasting" and is accomplished by the humble "dot" operator: `.`

We can put this dot _in front of_ any arithmetic operator to make the operator apply to each element of a collection:

```{julia}
arrayB.^2
```

```{julia}
3 .* arrayA
```

We can also put this dot _right after_ a function to have the function apply to each element in a collection:

```{julia}
sqrt.([64 25 36])
```

### Macros

_Macros_ are a kind of function that takes text as input and converts it to code that is then evaluated. They are a somewhat advanced topic in terms of developing a full undertanding. For now, I just want to mention them because some are hugely useful even when starting out. As an example, if you are doing a lot of "dot" operations, you can use the `@.` macro to convert all the operators in a line to dot operators:

```{julia}
begin
  data = [3 7 -4 9]
  results = @. 2data + data^2
end
```

The above produces the same output as:

```{julia}
results = 2 .* data .+ data.^2
```

Another useful macro is `@time` :

```{julia}
@time sum(rand(1000))
```

The `rand(x)` function produces `x` random numbers between 0 and 1. The above returns the sum of 1000 such numbers. Julia tells you the time it took, followed by the sum.

***Try this:*** Modify the above code so that it takes the square root of one million random numbers between 0 and 1, and then adds them up. 


### Defining your own functions

Julia facilitates the writing of your own functions. This can have huge benefits in terms of organizing your programs and making them efficient. There are several ways to define them:

```{julia}
sumSqrtRands(x) = sum(sqrt.(rand(x)))
```

We've defined that function. Now we can use it:

```{julia}
@time sumSqrtRands(1_000_000)
```

Below demonstrates another way to write functions, in this case with two _arguments_ (things you pass into the function, called _parameters_ inside the function):

```{julia}
function xSquaredPlusY(x, y)
  x^2 + y
end
```

Try calling that function a few times, with different values of `x` and `y`, e.g.:

```{julia}
xSquaredPlusY(3, -2)
```

***Try this:*** Can you figure out how to call the function in a way where you can input a series of numbers as the first argument (for example, `x = [1, 3, 7]`), and `-2` as the second argument? (_Hint_: if you get an error, reviewing the Broadcasting section above might help)


### Packages

Thousands of people around the world have contributed over 10,000 _packages_ that extend functionality of Julia. Installing these packages is easy.

First, enter the _package mode_ of the REPL by typing the right square bracket symbol `]` . You will then see the `julia>` prompt change into a prompt that looks something like `(@v1.10) pkg>` . Then, type a command to add a package, e.g.:

```julia
add Plots
```

This tells Julia to download and install the officially registered package with that name. The Plots package is a big one, so this can take some time. 

To get out of package mode, press the "delete" key and this will return you to the normal Julia REPL mode.

To actually use the Plots package, we need to load it into the memory for this Julia session. To do that, simply write:

```{julia}
using Plots
```

Now, let's use a function called `plot()` that is included in this Plots package. Try:

```{julia}
x = -5:5
y = x .^ 2
plot(x, y)
```

This will likely open another window on your computer, and show a plot. (If not, don't worry--we're going to set up another good way to plot in the next page.)

If the above worked, you can see another way to run the plot() function here:

```{julia}
f(x) = x^2
plot(f)
```

In our first use of the plot() function above, we passed in two argument, both vectors of numbers. In the second, we passed in just a mathematical function, and plot() figured out a good way to show us the mathematical relationship represented by that function.

This flexibility in function calls is an example of _multiple dispatch_, a key feature of Julia. We'll come back to this topic in the future.

### Next steps

We've now learned a lot of basic concepts related to Julia programming, and it is now time to put them together in more complex ways. For that, we'll learn how to use Pluto notebooks on the next page. This will enable to write longer programs and organize and save them.















```{julia}

```